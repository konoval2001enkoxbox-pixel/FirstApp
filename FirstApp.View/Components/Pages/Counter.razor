@page "/counter"
@* @using FirstApp.View.Components.Layout
@using FirstApp.View.Service
@layout DocumentsLayout
@inject NotificationService NotificationService
@attribute [Authorize]
<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
        NotificationService.ShowAlert($"{currentCount}", "counter");
    }
}

<h3>Render HTML from Variable</h3>

<div>
    @((MarkupString)rawHtml)
</div>

@code {
    private string rawHtml = "<h1>Hello, World!</h1><p>This is a paragraph.</p>";
}
<h3>Date Picker Example</h3>

        <InputDate id="dateInput" @bind-Value="dateSelected" class="form-control" />

@if (dateSelected.HasValue)
{
    <p>Selected date: @dateSelected.Value.ToString("yyyy-MM-dd")</p>
}

@code {
    private DateTime? dateSelected;

    private void HandleValidSubmit()
    {
        // Handling the submission, e.g., displaying selected date
        Console.WriteLine($"Selected date: {dateSelected}");
    }
}

@code {
    private List<string> options = new List<string>
    {
        "Option 1",
        "Option 2",
        "Option 3"
    };

    private string selectedOption;

    private void OnChange(ChangeEventArgs e)
    {
        selectedOption = e.Value.ToString();
        // Handle the selected option as needed
    }
}

<select @onchange="OnChange">
    <option value="">Select an option</option>
    @foreach (var option in options)
    {
        <option value="@option">@option</option>
    }
</select>

<p>Selected Option: @selectedOption</p> *@
@inject NavigationManager Navigate
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProv

<section>
    <!-- Contact Form Section (Overlapping) -->
    <div class="container form-container-overlap">
        <div class="row justify-content-center" data-aos="fade-up" data-aos-delay="300">
            <div class="col-lg-10">
                <div class="contact-form-wrapper">
                    <h2 class="text-center mb-4">Datos Usuario</h2>


                    <div method="post" class="php-email-form">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="input-with-icon">
                                        <i class="bi bi-person"></i>
                                        <label>Nombre</label>
                                        <input @bind-value=usuario.Nombre type="text" class="form-control" name="name" placeholder="Cuenta" required="">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="input-with-icon">
                                        <i class="bi bi-person"></i>
                                        <label>Rol</label>
                                        <input @bind-value=usuario.Rol type="text" class="form-control" name="name" placeholder="Rol">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="input-with-icon">
                                        <i class="bi bi-person"></i>
                                        <label>Cuenta</label>
                                        <input @bind-value=usuario.Cuenta type="text" class="form-control" name="name" placeholder="Cuenta">
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="input-with-icon">
                                        <i class="bi bi-house-lock-fill"></i>
                                        <label>Password</label>
                                        <input @bind-value=usuario.Password type="password" class="form-control" name="email" placeholder="Password" required="">
                                    </div>
                                </div>
                            </div>
                            <p style="color:red">@estadosesion</p>
                            <div class="col-12 text-center">
                                <button style="background-color:cadetblue" @onclick=Ingresar type="submit" class="btn btn-primary btn-submit">
                                    INGRESAR
                                    @if (verSpinner)
                                    {
                                        <div class="spinner-grow spinner-grow-sm" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    }
                                </button>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    '
</section><!-- /Contact Section -->
@code {
    string pass = "";
    bool verSpinner = false;
    void Navegar()
    {
        string direc = "/managerpro/" + pass;
        Navigate.NavigateTo(direc);
    }
    Usuario usuario = new Usuario();

    string token = null;
    string estadosesion = "";
    async Task Ingresar()
    {
        verSpinner = true;
        try
        {
            using (HttpClient http = new HttpClient())
            {
                var resp = await http.PostAsJsonAsync("https://testserverapp-c0fjepaec3gve3hs.eastus-01.azurewebsites.net/api/Usuario/TestLogin", usuario);
                token = await resp.Content.ReadAsStringAsync();
                if (resp.IsSuccessStatusCode)
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "Token", token);
                    await GuardarCuentaLoacl();
                    await AuthStateProv.GetAuthenticationStateAsync();
                    Navigate.NavigateTo("/");
                }
                else
                {
                    estadosesion = await resp.Content.ReadAsStringAsync();
                }
            }


            var nuevo = new Usuario();
            usuario = nuevo;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        verSpinner = false;
    }

    async Task logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "Token");
        await AuthStateProv.GetAuthenticationStateAsync();
        Navigate.NavigateTo("/", forceLoad: true);
    }
    async Task GuardarCuentaLoacl()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "userteme", usuario.Cuenta);
    }

    public class Usuario
    {
        public int Id { get; set; }
        public string? Nombre { get; set; }
        public string? Rol { get; set; }
        public string? Cuenta { get; set; }//Correo, cedula, cadena unica, telefono...
        public string? Password { get; set; }
    }
}
