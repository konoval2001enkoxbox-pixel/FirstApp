@page "/Login/Login"
@using FirstApp.View.Security
@inject NavigationManager Navigation
@inject IRepositoryMAUI Repository
@inject NavigationManager Navigate
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProv

<h3>Login</h3>
<h4>@Message</h4>
<EditForm Model="loginModel" OnValidSubmit="LoginRequest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="loginModel.Username" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" type="password" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit">Login</button>
</EditForm>
<button @onclick="SendQuery">GetData</button>

<svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" width="198" height="198" class="app-loader-svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M0 0H20V19.2H0V0ZM14.9139 17.2127H17.9608V17.2096C17.9608 11.8127 15.2514 7.97153 11.1509 5.03199H18.0137V2.03786H2.0033V5.03199H2.89809C9.75683 5.49698 14.9139 10.2641 14.9139 17.2096V17.2127ZM1.99631 14.1256C3.98562 14.256 5.02022 15.2385 5.15804 17.2177H7.98622C7.98622 17.2127 7.98722 17.2076 7.98722 17.2026C7.98722 13.6232 5.62041 11.3104 2.02626 11.3104C2.01628 11.3104 2.00629 11.3114 1.99631 11.3114V14.1256ZM1.98931 9.5343C1.99631 9.5343 2.0023 9.5343 2.00929 9.5343C6.60309 9.5343 9.98851 12.6224 9.99151 17.1965H13.0384C13.0354 10.9505 8.28082 6.49873 2.00929 6.49873C2.0023 6.49873 1.99631 6.49873 1.98931 6.49873V9.5343Z" fill="currentColor"></path>
</svg>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;
    private string? token;

    private async Task LoginRequest()
    {
        token = await Repository.Login.LoginRequest(loginModel.Username, loginModel.Password);
        Storage.Set(Storage.TOKEN, token);
        await JS.InvokeVoidAsync("localStorage.setItem", "Token", token);
        await AuthStateProv.GetAuthenticationStateAsync();
        Message = token;
        // Сохраните токен и переходите на защищенную страницу
        // Navigation.NavigateTo("/home"); // Navigate to a different page

    }

    private async Task SendQuery()
    {
        try
        {
            Message = System.Text.Json.JsonSerializer.Serialize(await Repository.Weather.SendQuery(token));
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
        // Сохраните токен и переходите на защищенную страницу
        // Navigation.NavigateTo("/home"); // Navigate to a different page

    }

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private string Message = null;

}
